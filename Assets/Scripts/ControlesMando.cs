//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/ControlesMando.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlesMando: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlesMando()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlesMando"",
    ""maps"": [
        {
            ""name"": ""Juego"",
            ""id"": ""4bb7367d-dddf-4af3-8b23-6ae5c0cea496"",
            ""actions"": [
                {
                    ""name"": ""Aumentar"",
                    ""type"": ""Button"",
                    ""id"": ""52765416-127a-4779-a054-9d71491eb0e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Disminuir"",
                    ""type"": ""Button"",
                    ""id"": ""1073e224-ffe2-4a83-ac4d-ed6461f255a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotarDerecha"",
                    ""type"": ""Button"",
                    ""id"": ""35beecc8-9647-4b83-bcaa-b24620314a24"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotarIzquierda"",
                    ""type"": ""Button"",
                    ""id"": ""ce65720f-eb88-488a-82c0-c748f93e1b50"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Adelante"",
                    ""type"": ""Button"",
                    ""id"": ""6ad0fd50-2618-49f2-a4d3-fe83c16d99f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Atras"",
                    ""type"": ""Button"",
                    ""id"": ""7174e490-2ac5-4ed5-b479-2796f05695d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17a89361-bd9c-4f0d-a2f3-d85f443ac1d5"",
                    ""path"": ""<HID::GreenAsia Inc.    USB Joystick     >/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aumentar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a9a0a6e-e261-48c3-86ea-92311b37474a"",
                    ""path"": ""<HID::GreenAsia Inc.    USB Joystick     >/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Disminuir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83105514-9e7d-4726-886f-747f24e317bc"",
                    ""path"": ""<HID::GreenAsia Inc.    USB Joystick     >/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotarDerecha"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e12247e6-1a39-43f1-8c4e-b62b9ae51653"",
                    ""path"": ""<HID::GreenAsia Inc.    USB Joystick     >/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotarIzquierda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a65db8d9-c343-4a01-9275-fef049015577"",
                    ""path"": ""<HID::GreenAsia Inc.    USB Joystick     >/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Adelante"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0880da0-d2b0-4314-8f4c-a1f9c56b0bdd"",
                    ""path"": ""<HID::GreenAsia Inc.    USB Joystick     >/hat/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map1"",
            ""id"": ""28c232d4-63ca-46d9-86bd-593999539576"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""7c18ad55-feba-4c66-806c-31e9644dcbdb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bdf7e170-ef4b-465a-bcbd-bc563a1fcca9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Juego
        m_Juego = asset.FindActionMap("Juego", throwIfNotFound: true);
        m_Juego_Aumentar = m_Juego.FindAction("Aumentar", throwIfNotFound: true);
        m_Juego_Disminuir = m_Juego.FindAction("Disminuir", throwIfNotFound: true);
        m_Juego_RotarDerecha = m_Juego.FindAction("RotarDerecha", throwIfNotFound: true);
        m_Juego_RotarIzquierda = m_Juego.FindAction("RotarIzquierda", throwIfNotFound: true);
        m_Juego_Adelante = m_Juego.FindAction("Adelante", throwIfNotFound: true);
        m_Juego_Atras = m_Juego.FindAction("Atras", throwIfNotFound: true);
        // New action map1
        m_Newactionmap1 = asset.FindActionMap("New action map1", throwIfNotFound: true);
        m_Newactionmap1_Newaction = m_Newactionmap1.FindAction("New action", throwIfNotFound: true);
    }

    ~@ControlesMando()
    {
        UnityEngine.Debug.Assert(!m_Juego.enabled, "This will cause a leak and performance issues, ControlesMando.Juego.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Newactionmap1.enabled, "This will cause a leak and performance issues, ControlesMando.Newactionmap1.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Juego
    private readonly InputActionMap m_Juego;
    private List<IJuegoActions> m_JuegoActionsCallbackInterfaces = new List<IJuegoActions>();
    private readonly InputAction m_Juego_Aumentar;
    private readonly InputAction m_Juego_Disminuir;
    private readonly InputAction m_Juego_RotarDerecha;
    private readonly InputAction m_Juego_RotarIzquierda;
    private readonly InputAction m_Juego_Adelante;
    private readonly InputAction m_Juego_Atras;
    public struct JuegoActions
    {
        private @ControlesMando m_Wrapper;
        public JuegoActions(@ControlesMando wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aumentar => m_Wrapper.m_Juego_Aumentar;
        public InputAction @Disminuir => m_Wrapper.m_Juego_Disminuir;
        public InputAction @RotarDerecha => m_Wrapper.m_Juego_RotarDerecha;
        public InputAction @RotarIzquierda => m_Wrapper.m_Juego_RotarIzquierda;
        public InputAction @Adelante => m_Wrapper.m_Juego_Adelante;
        public InputAction @Atras => m_Wrapper.m_Juego_Atras;
        public InputActionMap Get() { return m_Wrapper.m_Juego; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JuegoActions set) { return set.Get(); }
        public void AddCallbacks(IJuegoActions instance)
        {
            if (instance == null || m_Wrapper.m_JuegoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JuegoActionsCallbackInterfaces.Add(instance);
            @Aumentar.started += instance.OnAumentar;
            @Aumentar.performed += instance.OnAumentar;
            @Aumentar.canceled += instance.OnAumentar;
            @Disminuir.started += instance.OnDisminuir;
            @Disminuir.performed += instance.OnDisminuir;
            @Disminuir.canceled += instance.OnDisminuir;
            @RotarDerecha.started += instance.OnRotarDerecha;
            @RotarDerecha.performed += instance.OnRotarDerecha;
            @RotarDerecha.canceled += instance.OnRotarDerecha;
            @RotarIzquierda.started += instance.OnRotarIzquierda;
            @RotarIzquierda.performed += instance.OnRotarIzquierda;
            @RotarIzquierda.canceled += instance.OnRotarIzquierda;
            @Adelante.started += instance.OnAdelante;
            @Adelante.performed += instance.OnAdelante;
            @Adelante.canceled += instance.OnAdelante;
            @Atras.started += instance.OnAtras;
            @Atras.performed += instance.OnAtras;
            @Atras.canceled += instance.OnAtras;
        }

        private void UnregisterCallbacks(IJuegoActions instance)
        {
            @Aumentar.started -= instance.OnAumentar;
            @Aumentar.performed -= instance.OnAumentar;
            @Aumentar.canceled -= instance.OnAumentar;
            @Disminuir.started -= instance.OnDisminuir;
            @Disminuir.performed -= instance.OnDisminuir;
            @Disminuir.canceled -= instance.OnDisminuir;
            @RotarDerecha.started -= instance.OnRotarDerecha;
            @RotarDerecha.performed -= instance.OnRotarDerecha;
            @RotarDerecha.canceled -= instance.OnRotarDerecha;
            @RotarIzquierda.started -= instance.OnRotarIzquierda;
            @RotarIzquierda.performed -= instance.OnRotarIzquierda;
            @RotarIzquierda.canceled -= instance.OnRotarIzquierda;
            @Adelante.started -= instance.OnAdelante;
            @Adelante.performed -= instance.OnAdelante;
            @Adelante.canceled -= instance.OnAdelante;
            @Atras.started -= instance.OnAtras;
            @Atras.performed -= instance.OnAtras;
            @Atras.canceled -= instance.OnAtras;
        }

        public void RemoveCallbacks(IJuegoActions instance)
        {
            if (m_Wrapper.m_JuegoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJuegoActions instance)
        {
            foreach (var item in m_Wrapper.m_JuegoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JuegoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JuegoActions @Juego => new JuegoActions(this);

    // New action map1
    private readonly InputActionMap m_Newactionmap1;
    private List<INewactionmap1Actions> m_Newactionmap1ActionsCallbackInterfaces = new List<INewactionmap1Actions>();
    private readonly InputAction m_Newactionmap1_Newaction;
    public struct Newactionmap1Actions
    {
        private @ControlesMando m_Wrapper;
        public Newactionmap1Actions(@ControlesMando wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Newactionmap1_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Newactionmap1Actions set) { return set.Get(); }
        public void AddCallbacks(INewactionmap1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INewactionmap1Actions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INewactionmap1Actions instance)
        {
            if (m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmap1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Newactionmap1Actions @Newactionmap1 => new Newactionmap1Actions(this);
    public interface IJuegoActions
    {
        void OnAumentar(InputAction.CallbackContext context);
        void OnDisminuir(InputAction.CallbackContext context);
        void OnRotarDerecha(InputAction.CallbackContext context);
        void OnRotarIzquierda(InputAction.CallbackContext context);
        void OnAdelante(InputAction.CallbackContext context);
        void OnAtras(InputAction.CallbackContext context);
    }
    public interface INewactionmap1Actions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
